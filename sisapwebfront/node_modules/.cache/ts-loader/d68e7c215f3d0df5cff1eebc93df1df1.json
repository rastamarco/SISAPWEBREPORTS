{"remainingRequest":"C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\src\\views\\SistGerenciamentoProducao\\SistControleExpedição\\Relatorios\\Parametros\\entradaSaidaTunelCongelamento.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\src\\views\\SistGerenciamentoProducao\\SistControleExpedição\\Relatorios\\Parametros\\entradaSaidaTunelCongelamento.vue","mtime":1613587983059},{"path":"C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613587965760},{"path":"C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\babel-loader\\lib\\index.js","mtime":1613587964762},{"path":"C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\ts-loader\\index.js","mtime":1613587978150},{"path":"C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613587965760},{"path":"C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\vue-loader\\lib\\index.js","mtime":1613587979922}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lar\\Desktop\\SISAP Web Reports\\SISAPWEBREPORTS\\sisapwebfront\\src\\views\\SistGerenciamentoProducao\\SistControleExpedição\\Relatorios\\Parametros\\entradaSaidaTunelCongelamento.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport {\r\n  Component,\r\n  Vue,\r\n  Prop,\r\n  Watch\r\n} from 'vue-property-decorator';\r\nimport {\r\n  Action, Getter\r\n} from 'vuex-class';\r\n@Component\r\nexport default class EntradaSaidaTunelCongelamento extends Vue {\r\n  @Prop() clearFields!: any; \r\n\r\n  @Action noShowReport\r\n  @Action reportEntradaSaidaTunelCongelamentoExp\r\n  \r\n  @Getter showReport\r\n  @Getter filialName\r\n  @Getter box\r\n\r\n  private menu: boolean = false;\r\n  private menu2: boolean = false;\r\n  private date = new Date().toISOString().substr(0, 10);\r\n  private dateFormatted = this.formatDate(new Date().toISOString().substr(0, 10));\r\n  private dateMax = new Date().toISOString().substr(0, 10);\r\n  private rgShift: any = '3';\r\n  private rgPeriod: any = '3'; \r\n\r\n  public Clear(): void{\r\n    this.date = new Date().toISOString().substr(0, 10);\r\n    this.rgShift = '3';\r\n    this.rgPeriod = '3';\r\n  }\r\n\r\n   @Watch('clearFields')\r\n  public async onPropertyChangedsClearFields(value: any, oldValue: any): Promise < void > {\r\n    this.Clear();\r\n    this.$emit('resetClearFields');\r\n  }\r\n\r\n   @Watch('date')\r\n   public async onPropertyChangedsDate(value: any, oldValue: any): Promise < void > {\r\n     this.dateFormatted = this.formatDate(value);\r\n   }\r\n\r\n   public setDate(): void {\r\n     this.menu = false;\r\n   }\r\n\r\n   public addDay(date: string): any {\r\n     if (!date) return null;\r\n     const [year, month, day] = date.split('-');\r\n     return `${year}/${month}/${parseInt(day)+1}`;\r\n   }\r\n\r\n   public formatDate(date: string): any {\r\n     if (!date) return null;\r\n     const [year, month, day] = date.split('-');\r\n     return `${day}/${month}/${year}`;\r\n   }\r\n\r\n   public parseDate(date: any): any {\r\n     if (!date) return null;\r\n\r\n     const [day, month, year] = date.split('/');\r\n     return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\r\n   }\r\n\r\n   public async Print(): Promise < void > {\r\n     if(this.showReport === true){\r\n       await this.noShowReport({show: false});\r\n     }\r\n     await this.ReportEntradaSaidaTunelExp();\r\n     this.closeModal();\r\n   }\r\n\r\n   public async ReportEntradaSaidaTunelExp(): Promise < void > {\r\n     let initDate = '';\r\n     let finalDate = '';\r\n     initDate = this.date;\r\n     finalDate = this.addDay(this.date);\r\n     switch(this.rgShift){\r\n     case '3':\r\n       await this.reportEntradaSaidaTunelCongelamentoExp({ initialDate: initDate, endDate: finalDate, idReport: 68, reportModule: 2});\r\n       break;\r\n     default:\r\n       if(this.rgPeriod < '3'){\r\n         await this.reportEntradaSaidaTunelCongelamentoExp({ initialDate: initDate, endDate: finalDate, shift: this.rgShift, period: this.rgPeriod, idReport: 60, reportModule: 2});\r\n         break;\r\n       }else{ \r\n         await this.reportEntradaSaidaTunelCongelamentoExp({ initialDate: initDate, endDate: finalDate, shift: this.rgShift, idReport: 69, reportModule: 2});\r\n         break;\r\n       } \r\n       \r\n     }\r\n     \r\n   }\r\n\r\n   public closeModal(): void {\r\n     this.Clear();\r\n     this.$emit('closeModal');\r\n   }\r\n\r\n} \r\n"],"sourceRoot":""}]}