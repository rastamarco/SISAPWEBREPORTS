{"remainingRequest":"C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\src\\store\\Expedicao.ts","dependencies":[{"path":"C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\src\\store\\Expedicao.ts","mtime":1610728677735},{"path":"C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovVXNlcnMvTGFyL3NvdXJjZS9yZXBvcy9zaXNhcFdlYkFwaS9TSVNBUFdFQlJFUE9SVFMvc2lzYXB3ZWJmcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBQYXJhbWV0ZXJzRXhwZWRpY2FvIGZyb20gJy4uL21vZGVscy9wYXJhbWV0ZXJzRXhwZWRpY2FvLm1vZGVsJzsKZXhwb3J0IHZhciBFeHBlZGljYW8gPSB7CiAgc3RhdGU6IHsKICAgIGFsbENoYW1iZXJzOiBudWxsLAogICAgcHJvZHVjdE5hbWU6IG51bGwsCiAgICB2YWxpZFBhbGxldDogbnVsbCwKICAgIGJveDogbnVsbCwKICAgIHZhbGlkRW1wbG95ZTogbnVsbAogIH0sCiAgZ2V0dGVyczogewogICAgYWxsQ2hhbWJlcnM6IGZ1bmN0aW9uIGFsbENoYW1iZXJzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5hbGxDaGFtYmVyczsKICAgIH0sCiAgICBwcm9kdWN0TmFtZTogZnVuY3Rpb24gcHJvZHVjdE5hbWUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnByb2R1Y3ROYW1lOwogICAgfSwKICAgIHZhbGlkUGFsbGV0OiBmdW5jdGlvbiB2YWxpZFBhbGxldChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUudmFsaWRQYWxsZXQ7CiAgICB9LAogICAgYm94OiBmdW5jdGlvbiBib3goc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmJveDsKICAgIH0sCiAgICB2YWxpZEVtcGxveWU6IGZ1bmN0aW9uIHZhbGlkRW1wbG95ZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUudmFsaWRFbXBsb3llOwogICAgfQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzZXRBbGxDaGFtYmVyczogZnVuY3Rpb24gc2V0QWxsQ2hhbWJlcnMoc3RhdGUsIHZhbHVlKSB7CiAgICAgIHN0YXRlLmFsbENoYW1iZXJzID0gdmFsdWU7CiAgICB9LAogICAgc2V0UHJvZHVjdE5hbWU6IGZ1bmN0aW9uIHNldFByb2R1Y3ROYW1lKHN0YXRlLCB2YWx1ZSkgewogICAgICBzdGF0ZS5wcm9kdWN0TmFtZSA9IHZhbHVlOwogICAgfSwKICAgIHNldFZhbGlkUGFsbGV0OiBmdW5jdGlvbiBzZXRWYWxpZFBhbGxldChzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUudmFsaWRQYWxsZXQgPSB2YWx1ZTsKICAgIH0sCiAgICBzZXRCb3g6IGZ1bmN0aW9uIHNldEJveChzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUuYm94ID0gdmFsdWU7CiAgICB9LAogICAgc2V0VmFsaWRFbXBsb3llOiBmdW5jdGlvbiBzZXRWYWxpZEVtcGxveWUoc3RhdGUsIHZhbHVlKSB7CiAgICAgIHN0YXRlLnZhbGlkRW1wbG95ZSA9IHZhbHVlOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vICBHRVQgSU5GT1JNQVRJT05TIFBBUkFNRVRFUlMKICAgIGdldENoYW1iZXJzQnlGaWxpYWw6IGZ1bmN0aW9uIGdldENoYW1iZXJzQnlGaWxpYWwoX3JlZiwgb3B0aW9ucykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjb21taXQsIHJvdXRlQVBJTG9naW4sIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgICAgcm91dGVBUElMb2dpbiA9ICIiLmNvbmNhdChwcm9jZXNzLmVudi5WVUVfQVBQX0FQSV9VUkwsICIvYXBpL2V4cGVkaXRpb24vY2hhbWJlcnMvIikuY29uY2F0KG9wdGlvbnMuZmlsaWFsLCAiPyIpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MoewogICAgICAgICAgICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgICAgICAgICAgICB1cmw6IHJvdXRlQVBJTG9naW4KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldEFsbENoYW1iZXJzJywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRQcm9kdWN0TmFtZTogZnVuY3Rpb24gZ2V0UHJvZHVjdE5hbWUoX3JlZjIsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcm91dGVBUElMb2dpbiwgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgICAgIHJvdXRlQVBJTG9naW4gPSAiIi5jb25jYXQocHJvY2Vzcy5lbnYuVlVFX0FQUF9BUElfVVJMLCAiL2FwaS9pbmZvcm1hdGlvbnMvcHJvZHVjdC8iKS5jb25jYXQob3B0aW9ucy5wcm9kdWN0SWQsICIvIikuY29uY2F0KG9wdGlvbnMuZmlsaWFsTmFtZSwgIj8iKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcyh7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgICAgICAgICAgIHVybDogcm91dGVBUElMb2dpbgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UHJvZHVjdE5hbWUnLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFByb2R1Y3ROYW1lJywgbnVsbCk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRWYWxpZFBhbGxldDogZnVuY3Rpb24gZ2V0VmFsaWRQYWxsZXQoX3JlZjMsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcm91dGVBUElMb2dpbiwgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICAgIHJvdXRlQVBJTG9naW4gPSAiIi5jb25jYXQocHJvY2Vzcy5lbnYuVlVFX0FQUF9BUElfVVJMLCAiL2FwaS9leHBlZGl0aW9uL3BhbGxldC8iKS5jb25jYXQob3B0aW9ucy5maWxpYWxOYW1lLCAiLyIpLmNvbmNhdChvcHRpb25zLm5yUGFsbGV0LCAiPyIpOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zKHsKICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICAgICAgICAgICAgdXJsOiByb3V0ZUFQSUxvZ2luCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDMuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRWYWxpZFBhbGxldCcsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0VmFsaWRQYWxsZXQnLCBudWxsKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFNldElkQm94OiBmdW5jdGlvbiBTZXRJZEJveChfcmVmNCwgb3B0aW9ucykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgY29tbWl0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNC5jb21taXQ7CiAgICAgICAgICAgICAgICBjb21taXQoJ3NldEJveCcsIG9wdGlvbnMuaWQpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBHZXRFbXBsb3llUmVnaXN0ZXI6IGZ1bmN0aW9uIEdldEVtcGxveWVSZWdpc3RlcihfcmVmNSwgb3B0aW9ucykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgY29tbWl0LCByb3V0ZUFQSUxvZ2luLCByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjUuY29tbWl0OwogICAgICAgICAgICAgICAgcm91dGVBUElMb2dpbiA9ICIiLmNvbmNhdChwcm9jZXNzLmVudi5WVUVfQVBQX0FQSV9VUkwsICIvYXBpL3VzZXJzL2VtcGxveWUvIikuY29uY2F0KG9wdGlvbnMuY29kU2ljb3AsICIvIikuY29uY2F0KG9wdGlvbnMuZmlsaWFsTmFtZSwgIj8iKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcyh7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgICAgICAgICAgIHVybDogcm91dGVBUElMb2dpbgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ1LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0VmFsaWRFbXBsb3llJywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRWYWxpZEVtcGxveWUnLCBudWxsKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLyAgRU5EIElORk9STUFUSU9OUyBQQVJBTUVURVJTIC8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8gUkVQT1JUIEZVTkNUSU9OUwogICAgcmVwb3J0Rm9ybWFjYW9QYWxsZXRzOiBmdW5jdGlvbiByZXBvcnRGb3JtYWNhb1BhbGxldHMoX3JlZjYsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcGFyYW1ldGVyOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNi5jb21taXQ7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIgPSBuZXcgUGFyYW1ldGVyc0V4cGVkaWNhbygpOwogICAgICAgICAgICAgICAgcGFyYW1ldGVyLm5yUGFsbGV0ID0gb3B0aW9ucy5uclBhbGxldDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldElkUmVwb3J0Jywgb3B0aW9ucy5pZFJlcG9ydCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFJlcG9ydE1vZHVsZScsIG9wdGlvbnMucmVwb3J0TW9kdWxlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UGFyYW1zJywgSlNPTi5zdHJpbmdpZnkocGFyYW1ldGVyKSk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICByZXBvcnRNb3ZpbWVudG9DYW1hcmFPcGVyYWRvcjogZnVuY3Rpb24gcmVwb3J0TW92aW1lbnRvQ2FtYXJhT3BlcmFkb3IoX3JlZjcsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcGFyYW1ldGVyLCBjaGFtYmVyVG9SZXBvcnQsIGk7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY3LmNvbW1pdDsKICAgICAgICAgICAgICAgIHBhcmFtZXRlciA9IG5ldyBQYXJhbWV0ZXJzRXhwZWRpY2FvKCk7CiAgICAgICAgICAgICAgICBjaGFtYmVyVG9SZXBvcnQgPSBbXTsgLy8gOCBDQU1BUkFTLCBjYXNvIGF1bWVudGUsIGNvbG9jYSBtYWlzIGFxdWkgZSBtYWlzIHBhcmFtZXRyb3Mgbm8gcmVsYXRvcmlvIHF1ZSB2YWkgZGFyIGNlcnRvIG91IGltcGxlbWVudGUgdW1hIGZvcm1hIG1lbGhvciA9KSAKCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgODsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNoYW1iZXJzW2ldID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5jaGFtYmVyc1tpXSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGNoYW1iZXJUb1JlcG9ydC5wdXNoKCcnKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjaGFtYmVyVG9SZXBvcnQucHVzaChvcHRpb25zLmNoYW1iZXJzW2ldKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5DaGFtYmVycyA9IGNoYW1iZXJUb1JlcG9ydDsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5Jbml0aWFsRGF0ZSA9IG9wdGlvbnMuaW5pdGlhbERhdGU7CgogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVnaXN0cmF0aW9uKSB7CiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlci5SZWdpc3RyYXRpb24gPSBvcHRpb25zLnJlZ2lzdHJhdGlvbjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lbmREYXRlKSB7CiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlci5FbmREYXRlID0gb3B0aW9ucy5lbmREYXRlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNoaWZ0IHx8IG9wdGlvbnMuc2hpZnQgIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlci5TaGlmdCA9IG9wdGlvbnMuc2hpZnQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldElkUmVwb3J0Jywgb3B0aW9ucy5pZFJlcG9ydCk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UmVwb3J0TW9kdWxlJywgb3B0aW9ucy5yZXBvcnRNb2R1bGUpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFBhcmFtcycsIEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcikpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFNob3dSZXBvcnQnLCB0cnVlKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHJlcG9ydENhbWFyYTogZnVuY3Rpb24gcmVwb3J0Q2FtYXJhKF9yZWY4LCBvcHRpb25zKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICAgIHZhciBjb21taXQsIHBhcmFtZXRlcjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjguY29tbWl0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gbmV3IFBhcmFtZXRlcnNFeHBlZGljYW8oKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldElkUmVwb3J0Jywgb3B0aW9ucy5pZFJlcG9ydCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFJlcG9ydE1vZHVsZScsIG9wdGlvbnMucmVwb3J0TW9kdWxlKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UGFyYW1zJywgSlNPTi5zdHJpbmdpZnkocGFyYW1ldGVyKSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBSZXBvcnRIaXN0b3JpY29DYW1hcmFQYWxsZXQ6IGZ1bmN0aW9uIFJlcG9ydEhpc3Rvcmljb0NhbWFyYVBhbGxldChfcmVmOSwgb3B0aW9ucykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgICB2YXIgY29tbWl0LCBwYXJhbWV0ZXIsIGNoYW1iZXJUb1JlcG9ydDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjkuY29tbWl0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gbmV3IFBhcmFtZXRlcnNFeHBlZGljYW8oKTsKICAgICAgICAgICAgICAgIGNoYW1iZXJUb1JlcG9ydCA9IFtdOwoKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZFNpY29wKSB7CiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlci5Db2RTaWNvcCA9IG9wdGlvbnMuY29kU2ljb3A7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY2hhbWJlclRvUmVwb3J0LnB1c2gob3B0aW9ucy5pZENoYW1iZXIpOwogICAgICAgICAgICAgICAgcGFyYW1ldGVyLkNoYW1iZXJzID0gY2hhbWJlclRvUmVwb3J0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyLkluaXRpYWxEYXRlID0gb3B0aW9ucy5pbml0aWFsRGF0ZTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5FbmREYXRlID0gb3B0aW9ucy5lbmREYXRlOwogICAgICAgICAgICAgICAgcGFyYW1ldGVyLmxvY2FsVXNlciA9IG9wdGlvbnMuZmlsaWFsTmFtZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRJZFJlcG9ydCcsIG9wdGlvbnMuaWRSZXBvcnQpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFJlcG9ydE1vZHVsZScsIG9wdGlvbnMucmVwb3J0TW9kdWxlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRQYXJhbXMnLCBKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXIpKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBSZXBvcnRMb2NhbGl6YWNhb1Byb2R1dG9zOiBmdW5jdGlvbiBSZXBvcnRMb2NhbGl6YWNhb1Byb2R1dG9zKF9yZWYxMCwgb3B0aW9ucykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTAoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcGFyYW1ldGVyOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTAkKF9jb250ZXh0MTApIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjEwLmNvbW1pdDsKICAgICAgICAgICAgICAgIHBhcmFtZXRlciA9IG5ldyBQYXJhbWV0ZXJzRXhwZWRpY2FvKCk7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuQ29kU2ljb3AgPSBvcHRpb25zLmNvZFNpY29wOwogICAgICAgICAgICAgICAgcGFyYW1ldGVyLm5yUGFsbGV0ID0gb3B0aW9ucy5uclBhbGxldDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRJZFJlcG9ydCcsIG9wdGlvbnMuaWRSZXBvcnQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UmVwb3J0TW9kdWxlJywgb3B0aW9ucy5yZXBvcnRNb2R1bGUpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFBhcmFtcycsIEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcikpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFJlcG9ydFBvc2ljYW9DYW1hcmFWYXppYTogZnVuY3Rpb24gUmVwb3J0UG9zaWNhb0NhbWFyYVZhemlhKF9yZWYxMSwgb3B0aW9ucykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTEoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcGFyYW1ldGVyOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjExLmNvbW1pdDsKICAgICAgICAgICAgICAgIHBhcmFtZXRlciA9IG5ldyBQYXJhbWV0ZXJzRXhwZWRpY2FvKCk7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIubG9jYWxVc2VyID0gb3B0aW9ucy5maWxpYWxOYW1lOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldElkUmVwb3J0Jywgb3B0aW9ucy5pZFJlcG9ydCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRSZXBvcnRNb2R1bGUnLCBvcHRpb25zLnJlcG9ydE1vZHVsZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRQYXJhbXMnLCBKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXIpKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFJlcG9ydFBlc29Qcm9kdXRvQ2FtYXJhOiBmdW5jdGlvbiBSZXBvcnRQZXNvUHJvZHV0b0NhbWFyYShfcmVmMTIsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEyKCkgewogICAgICAgIHZhciBjb21taXQsIHBhcmFtZXRlciwgY2hhbWJlclRvUmVwb3J0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjEyLmNvbW1pdDsKICAgICAgICAgICAgICAgIHBhcmFtZXRlciA9IG5ldyBQYXJhbWV0ZXJzRXhwZWRpY2FvKCk7CiAgICAgICAgICAgICAgICBjaGFtYmVyVG9SZXBvcnQgPSBbXTsKCiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jb2RTaWNvcCkgewogICAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuQ29kU2ljb3AgPSBvcHRpb25zLmNvZFNpY29wOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNoYW1iZXJUb1JlcG9ydC5wdXNoKG9wdGlvbnMuaWRDaGFtYmVyKTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5DaGFtYmVycyA9IGNoYW1iZXJUb1JlcG9ydDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRJZFJlcG9ydCcsIG9wdGlvbnMuaWRSZXBvcnQpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFJlcG9ydE1vZHVsZScsIG9wdGlvbnMucmVwb3J0TW9kdWxlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UGFyYW1zJywgSlNPTi5zdHJpbmdpZnkocGFyYW1ldGVyKSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAxNDsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFNob3dSZXBvcnQnLCB0cnVlKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUmVwb3J0UHJvZHV0b3NFbWJhcmNhZG9zOiBmdW5jdGlvbiBSZXBvcnRQcm9kdXRvc0VtYmFyY2Fkb3MoX3JlZjEzLCBvcHRpb25zKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMygpIHsKICAgICAgICB2YXIgY29tbWl0LCBwYXJhbWV0ZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEzLnByZXYgPSBfY29udGV4dDEzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTMuY29tbWl0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gbmV3IFBhcmFtZXRlcnNFeHBlZGljYW8oKTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5Jbml0aWFsRGF0ZSA9IG9wdGlvbnMuaW5pdGlhbERhdGU7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIubnJDYXJnYSA9IG9wdGlvbnMubnJDYXJnYTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5uckNvbnRlaW5lciA9IG9wdGlvbnMubnJDb250ZWluZXI7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0SWRSZXBvcnQnLCBvcHRpb25zLmlkUmVwb3J0KTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFJlcG9ydE1vZHVsZScsIG9wdGlvbnMucmVwb3J0TW9kdWxlKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRQYXJhbXMnLCBKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXIpKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0U2hvd1JlcG9ydCcsIHRydWUpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBSZXBvcnRFbWJhcnF1ZXNQZXJpb2RvOiBmdW5jdGlvbiBSZXBvcnRFbWJhcnF1ZXNQZXJpb2RvKF9yZWYxNCwgb3B0aW9ucykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTQoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcGFyYW1ldGVyOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTQkKF9jb250ZXh0MTQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNC5wcmV2ID0gX2NvbnRleHQxNC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjE0LmNvbW1pdDsKICAgICAgICAgICAgICAgIHBhcmFtZXRlciA9IG5ldyBQYXJhbWV0ZXJzRXhwZWRpY2FvKCk7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuSW5pdGlhbERhdGUgPSBvcHRpb25zLmluaXRpYWxEYXRlOwogICAgICAgICAgICAgICAgcGFyYW1ldGVyLkVuZERhdGUgPSBvcHRpb25zLmVuZERhdGU7CgogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubnJDb25mZXJlbnRlKSB7CiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlci5uck5vdGUgPSBvcHRpb25zLm5yQ29uZmVyZW50ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDE0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0SWRSZXBvcnQnLCBvcHRpb25zLmlkUmVwb3J0KTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFJlcG9ydE1vZHVsZScsIG9wdGlvbnMucmVwb3J0TW9kdWxlKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRQYXJhbXMnLCBKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXIpKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0U2hvd1JlcG9ydCcsIHRydWUpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBSZXBvcnRFbWJhcnF1ZXNEZXNlbWJhcnF1ZTogZnVuY3Rpb24gUmVwb3J0RW1iYXJxdWVzRGVzZW1iYXJxdWUoX3JlZjE1LCBvcHRpb25zKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNSgpIHsKICAgICAgICB2YXIgY29tbWl0LCBwYXJhbWV0ZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNSQoX2NvbnRleHQxNSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE1LnByZXYgPSBfY29udGV4dDE1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTUuY29tbWl0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gbmV3IFBhcmFtZXRlcnNFeHBlZGljYW8oKTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5Jbml0aWFsRGF0ZSA9IG9wdGlvbnMuaW5pdGlhbERhdGU7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuRW5kRGF0ZSA9IG9wdGlvbnMuZW5kRGF0ZTsKCiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5uckNvbmZlcmVudGUpIHsKICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyLm5yTm90ZSA9IG9wdGlvbnMubnJDb25mZXJlbnRlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNoaWZ0KSB7CiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlci5TaGlmdCA9IG9wdGlvbnMuc2hpZnQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldElkUmVwb3J0Jywgb3B0aW9ucy5pZFJlcG9ydCk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UmVwb3J0TW9kdWxlJywgb3B0aW9ucy5yZXBvcnRNb2R1bGUpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRQYXJhbXMnLCBKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXIpKTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0U2hvd1JlcG9ydCcsIHRydWUpOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICByZXBvcnRFbnRyYWRhU2FpZGFUdW5lbENvbmdlbGFtZW50b0V4cDogZnVuY3Rpb24gcmVwb3J0RW50cmFkYVNhaWRhVHVuZWxDb25nZWxhbWVudG9FeHAoX3JlZjE2LCBvcHRpb25zKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNigpIHsKICAgICAgICB2YXIgY29tbWl0LCBwYXJhbWV0ZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNiQoX2NvbnRleHQxNikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE2LnByZXYgPSBfY29udGV4dDE2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTYuY29tbWl0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gbmV3IFBhcmFtZXRlcnNFeHBlZGljYW8oKTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5Jbml0aWFsRGF0ZSA9IG9wdGlvbnMuaW5pdGlhbERhdGU7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuRW5kRGF0ZSA9IG9wdGlvbnMuZW5kRGF0ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRJZFJlcG9ydCcsIG9wdGlvbnMuaWRSZXBvcnQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UmVwb3J0TW9kdWxlJywgb3B0aW9ucy5yZXBvcnRNb2R1bGUpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFBhcmFtcycsIEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcikpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHJlcG9ydENhcmdhc0VtYmFyY2FkYXM6IGZ1bmN0aW9uIHJlcG9ydENhcmdhc0VtYmFyY2FkYXMoX3JlZjE3LCBvcHRpb25zKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNygpIHsKICAgICAgICB2YXIgY29tbWl0LCBwYXJhbWV0ZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNyQoX2NvbnRleHQxNykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE3LnByZXYgPSBfY29udGV4dDE3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTcuY29tbWl0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gbmV3IFBhcmFtZXRlcnNFeHBlZGljYW8oKTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5Jbml0aWFsRGF0ZSA9IG9wdGlvbnMuaW5pdGlhbERhdGU7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuRW5kRGF0ZSA9IG9wdGlvbnMuZW5kRGF0ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRJZFJlcG9ydCcsIG9wdGlvbnMuaWRSZXBvcnQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UmVwb3J0TW9kdWxlJywgb3B0aW9ucy5yZXBvcnRNb2R1bGUpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFBhcmFtcycsIEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcikpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHJlcG9ydFJlYWdlbmRhbWVudG9DYXJnYXM6IGZ1bmN0aW9uIHJlcG9ydFJlYWdlbmRhbWVudG9DYXJnYXMoX3JlZjE4LCBvcHRpb25zKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxOCgpIHsKICAgICAgICB2YXIgY29tbWl0LCBwYXJhbWV0ZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxOCQoX2NvbnRleHQxOCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE4LnByZXYgPSBfY29udGV4dDE4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTguY29tbWl0OwogICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gbmV3IFBhcmFtZXRlcnNFeHBlZGljYW8oKTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5Jbml0aWFsRGF0ZSA9IG9wdGlvbnMuaW5pdGlhbERhdGU7CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuRW5kRGF0ZSA9IG9wdGlvbnMuZW5kRGF0ZTsKICAgICAgICAgICAgICAgIHBhcmFtZXRlci5uck5vdGUgPSBvcHRpb25zLm9wZXJhdGlvbjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTgubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRJZFJlcG9ydCcsIG9wdGlvbnMuaWRSZXBvcnQpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfY29udGV4dDE4Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0UmVwb3J0TW9kdWxlJywgb3B0aW9ucy5yZXBvcnRNb2R1bGUpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dDE4Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldFBhcmFtcycsIEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcikpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdzZXRTaG93UmVwb3J0JywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxOCk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lar\\source\\repos\\sisapWebApi\\SISAPWEBREPORTS\\sisapwebfront\\src\\store\\Expedicao.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport ParametersExpedicao from '../models/parametersExpedicao.model';\r\nimport Product from '../models/product.model';\r\n\r\nexport const Expedicao = {\r\n  state:{\r\n    allChambers: null,\r\n    productName: null,\r\n    validPallet: null,\r\n    box: null,\r\n    validEmploye: null\r\n  },\r\n  getters:{\r\n    allChambers(state){\r\n      return state.allChambers;\r\n    },\r\n    productName(state){\r\n      return state.productName;\r\n    },\r\n    validPallet(state){\r\n      return state.validPallet;\r\n    },\r\n    box(state){\r\n      return state.box;\r\n    },\r\n    validEmploye(state){\r\n      return state.validEmploye;\r\n    }\r\n  },\r\n  mutations:{\r\n    setAllChambers(state, value) {\r\n      state.allChambers = value;\r\n    },\r\n    setProductName(state, value) {\r\n      state.productName = value;\r\n    },\r\n    setValidPallet(state, value){\r\n      state.validPallet = value;\r\n    },\r\n    setBox(state, value){\r\n      state.box = value;\r\n    },\r\n    setValidEmploye(state, value){\r\n      state.validEmploye = value;\r\n    },\r\n  },\r\n  actions:{\r\n    /////////////////////  GET INFORMATIONS PARAMETERS\r\n    async getChambersByFilial({ commit }, options){\r\n      const routeAPILogin = `${process.env.VUE_APP_API_URL}/api/expedition/chambers/${options.filial}?`;\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: routeAPILogin\r\n      });\r\n      if (response) {\r\n        if (response.status === 200) {\r\n          await commit('setAllChambers', response.data);\r\n        }\r\n      } \r\n    },\r\n\r\n    async getProductName({ commit }, options){\r\n      const routeAPILogin = `${process.env.VUE_APP_API_URL}/api/informations/product/${options.productId}/${options.filialName}?`;\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: routeAPILogin\r\n      });\r\n      if (response) {\r\n        if (response.status === 200) {\r\n          await commit('setProductName', response.data);\r\n        } else {\r\n          await commit('setProductName', null);\r\n        }\r\n      } \r\n    },\r\n\r\n    async getValidPallet({ commit }, options){\r\n      const routeAPILogin = `${process.env.VUE_APP_API_URL}/api/expedition/pallet/${options.filialName}/${options.nrPallet}?`;\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: routeAPILogin\r\n      });\r\n      if (response) {\r\n        if (response.status === 200) {\r\n          await commit('setValidPallet', response.data);\r\n        } else {\r\n          await commit('setValidPallet', null);\r\n        }\r\n      } \r\n    },\r\n\r\n    async SetIdBox({commit}, options){\r\n      commit('setBox', options.id);\r\n    },\r\n\r\n    async GetEmployeRegister({ commit }, options){\r\n      const routeAPILogin = `${process.env.VUE_APP_API_URL}/api/users/employe/${options.codSicop}/${options.filialName}?`;\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: routeAPILogin\r\n      });\r\n      if (response) {\r\n        if (response.status === 200) {\r\n          await commit('setValidEmploye', response.data);\r\n        } else {\r\n          await commit('setValidEmploye', null);\r\n        }\r\n      } \r\n    },\r\n    /////////////////////  END INFORMATIONS PARAMETERS //////////////////\r\n    \r\n    //////////////////// REPORT FUNCTIONS\r\n    async reportFormacaoPallets({ commit }, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.nrPallet = options.nrPallet;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    }, \r\n\r\n    async reportMovimentoCamaraOperador({ commit }, options) {\r\n      const parameter = new ParametersExpedicao();\r\n      const chamberToReport: Array<any> = [];\r\n      // 8 CAMARAS, caso aumente, coloca mais aqui e mais parametros no relatorio que vai dar certo ou implemente uma forma melhor =) \r\n      for(let i = 0; i < 8;i++){\r\n        if(options.chambers[i] === undefined || options.chambers[i] === null){\r\n          chamberToReport.push('');  \r\n        }else{\r\n          chamberToReport.push(options.chambers[i]);\r\n        }\r\n      }\r\n      parameter.Chambers = chamberToReport;\r\n      parameter.InitialDate = options.initialDate;\r\n      if(options.registration){\r\n        parameter.Registration = options.registration;\r\n      }\r\n      if(options.endDate){\r\n        parameter.EndDate = options.endDate;\r\n      }\r\n      if(options.shift || options.shift !== ''){\r\n        parameter.Shift = options.shift;\r\n      }\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async reportCamara({commit }, options){\r\n      const parameter = new ParametersExpedicao();\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async ReportHistoricoCamaraPallet({commit}, options){\r\n      const parameter = new ParametersExpedicao();\r\n      const chamberToReport: Array<any> = [];\r\n      if(options.codSicop){\r\n        parameter.CodSicop = options.codSicop;\r\n      }\r\n      chamberToReport.push(options.idChamber);\r\n      parameter.Chambers = chamberToReport;\r\n      parameter.InitialDate = options.initialDate;\r\n      parameter.EndDate = options.endDate;\r\n      parameter.localUser = options.filialName;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n\r\n    },\r\n\r\n    async ReportLocalizacaoProdutos({commit}, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.CodSicop = options.codSicop;\r\n      parameter.nrPallet = options.nrPallet;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async ReportPosicaoCamaraVazia({commit}, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.localUser = options.filialName;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async ReportPesoProdutoCamara({commit}, options){\r\n      const parameter = new ParametersExpedicao();\r\n      const chamberToReport: Array<any> = [];\r\n      if(options.codSicop){\r\n        parameter.CodSicop = options.codSicop;\r\n      }\r\n      chamberToReport.push(options.idChamber);\r\n      parameter.Chambers = chamberToReport;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async ReportProdutosEmbarcados({commit}, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.InitialDate = options.initialDate;\r\n      parameter.nrCarga = options.nrCarga;\r\n      parameter.nrConteiner = options.nrConteiner;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async ReportEmbarquesPeriodo({commit}, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.InitialDate = options.initialDate;\r\n      parameter.EndDate = options.endDate;\r\n      if (options.nrConferente){\r\n        parameter.nrNote = options.nrConferente;\r\n      }\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n\r\n    },\r\n\r\n    async ReportEmbarquesDesembarque ({ commit }, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.InitialDate = options.initialDate;\r\n      parameter.EndDate = options.endDate;\r\n      if (options.nrConferente){\r\n        parameter.nrNote = options.nrConferente;\r\n      }\r\n      if(options.shift){\r\n        parameter.Shift = options.shift;\r\n      }\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async reportEntradaSaidaTunelCongelamentoExp ({ commit }, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.InitialDate = options.initialDate;\r\n      parameter.EndDate = options.endDate;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async reportCargasEmbarcadas ({ commit }, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.InitialDate = options.initialDate;\r\n      parameter.EndDate = options.endDate;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n\r\n    async reportReagendamentoCargas ({ commit }, options){\r\n      const parameter = new ParametersExpedicao();\r\n      parameter.InitialDate = options.initialDate;\r\n      parameter.EndDate = options.endDate;\r\n      parameter.nrNote = options.operation;\r\n      await commit('setIdReport', options.idReport);\r\n      await commit('setReportModule', options.reportModule);\r\n      await commit('setParams', JSON.stringify(parameter)); \r\n      await commit('setShowReport', true);\r\n    },\r\n  }\r\n};"],"sourceRoot":""}]}